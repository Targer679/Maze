import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;


class Maze {
    private int[][] grid;
    private int n, m;
    private Random rand = new Random();
    Scanner input = new Scanner(System.in);

    // Directions: up, right, down, left
    private final int[][] dirs = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

    void generatePerfectMaze(int size) {
        this.n = size;
        this.m = size;
        grid = new int[n][m];

        // Initialize all walls
        for (int[] row : grid) Arrays.fill(row, 1);

        // Start carving from (1,1)
        carve(1, 1);

        // Create entrance and exit
        grid[1][0] = 0;
        grid[n - 2][m - 1] = 0;

        printMaze();
        System.out.println("Do you want the maze to be solved? ");
        System.out.println("1-Yes\n0-No");
        int b = input.nextInt();
        if (b == 1) {
            solve(1, 1);
        }
    }

    private void carve(int x, int y) {
        grid[x][y] = 0; // Mark as path

        // Create randomized directions
        List<int[]> directions = new ArrayList<>();
        Collections.addAll(directions, dirs);
        Collections.shuffle(directions, rand);

        for (int[] dir : directions) {
            int nx = x + dir[0] * 2;
            int ny = y + dir[1] * 2;

            if (nx > 0 && nx < n - 1 && ny > 0 && ny < m - 1 && grid[nx][ny] == 1) {
                grid[x + dir[0]][y + dir[1]] = 0; // Break the wall
                carve(nx, ny);
            }
        }
    }

    private void printMaze() {
        for (int[] row : grid) {
            for (int cell : row) {
                System.out.print(cell == 1 ? "██" : "  ");
            }
            System.out.println();
        }
    }
    private void printSolution(int[][] originalGrid) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    System.out.print("◉◉"); // Solution path
                } else if (originalGrid[i][j] == 0) {
                    System.out.print("  "); // Path
                } else {
                    System.out.print("██"); // Wall
                }
            }
            System.out.println();
        }
    }
    private boolean solve(int x, int y) {
        // Mark as part of solution path
        grid[x][y] = 2;

        // Check if we've reached the exit
        if (x == n - 2 && y == m - 2) {
            return true;
        }

        // Try all directions
        for (int[] dir : dirs) {
            int nx = x + dir[0];
            int ny = y + dir[1];

            // Check if next cell is valid and not visited
            if (nx >= 0 && nx < n && ny >= 0 && ny < m && grid[nx][ny] == 0) {
                if (solve(nx, ny)) {
                    return true;
                }
            }
        }

        // Backtrack - unmark this cell if no path found
        grid[x][y] = 0;
        return false;
    }
}
    class Main {
        public static void main(String[] args) {
            Maze maze = new Maze();
            maze.generatePerfectMaze(23); // Should be odd number
        }
    }
