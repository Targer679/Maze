import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Random;

class Maze {
    private int[][] grid;
    private int n, m;
    private Random rand = new Random();

    // Directions: up, right, down, left
    private final int[][] dirs = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

    void generatePerfectMaze(int size) {
        this.n = size;
        this.m = size;
        grid = new int[n][m];

        // Initialize all walls
        for (int[] row : grid) Arrays.fill(row, 1);

        // Start carving from (1,1)
        carve(1, 1);

        // Create entrance and exit
        grid[1][0] = 0;
        grid[n-2][m-1] = 0;

        printMaze();
    }

    private void carve(int x, int y) {
        grid[x][y] = 0; // Mark as path

        // Create randomized directions
        List<int[]> directions = new ArrayList<>();
        Collections.addAll(directions, dirs);
        Collections.shuffle(directions, rand);

        for (int[] dir : directions) {
            int nx = x + dir[0] * 2;
            int ny = y + dir[1] * 2;

            if (nx > 0 && nx < n-1 && ny > 0 && ny < m-1 && grid[nx][ny] == 1) {
                grid[x + dir[0]][y + dir[1]] = 0; // Break the wall
                carve(nx, ny);
            }
        }
    }

    private void printMaze() {
        for (int[] row : grid) {
            for (int cell : row) {
                System.out.print(cell == 1 ? "#" : " ");
            }
            System.out.println();
        }
    }
}

class Main {
    public static void main(String[] args) {
        Maze maze = new Maze();
        maze.generatePerfectMaze(5); // Should be odd number
    }
}
